phenotype_browser = false
phenotype_tool = false

study_type = ["WE"]
has_transmitted = false
has_complex = false
has_cnv = false

conf_dir = "."

[genotype_browser]
enabled = false
has_family_filters = true
has_study_filters = true
has_present_in_child = true
has_present_in_parent = true
has_pedigree_selector = false
has_graphical_preview = true

genotype.family.name = "family"
genotype.family.slots = [{name = "family id", source = "family"}, {name = "study", source = "studyName"}]

genotype.variant.name = "variant"
genotype.variant.slots = [{name = "location", source = "location"}, {name = "variant", source = "variant"}]

genotype.genotype.name = "genotype"
genotype.genotype.source = "pedigree"
genotype.genotype.slots = [{name = "in child", source = "inChild"}, {name = "from parent", source = "fromParent"}]

genotype.effect.name = "effect"
genotype.effect.slots = [{name = "worst effect", source = "worst_effect"}, {name = "genes", source = "genes"}]

genotype.weights.name = "vulnerability/intolerance"
genotype.weights.slots = [{source = "LGD_rank", name = "LGD rank", format = "LGD %%d"}, {source = "RVIS_rank", name="RVIS rank", format="RVIS %%d"}, {source="pLI_rank", name="pLI rank", format="pLI %%d"}]

genotype.phenotype.name = "phenotype"
genotype.phenotype.source = "phenotype"

genotype.best.name = "family genotype"
genotype.best.source = "best_st"

genotype.family_structure.name = "family structure"
genotype.family_structure.source = "family_structure"

genotype.geneeffect.name = "all effects"
genotype.geneeffect.source = "effects"

genotype.effectdetails.name = "effect details"
genotype.effectdetails.source = "effect_details"

genotype.alt_alleles.name = "alt alleles"
genotype.alt_alleles.source = "af_allele_count"

genotype.par_called.name = "parents called"
genotype.par_called.source = "af_parents_called_count"

genotype.allele_freq.name = "allele frequency"
genotype.allele_freq.source = "af_allele_freq"

genotype.inchild.name = "in child"
genotype.inchild.source = "inChS"

genotype.fromparent.name = "from parent"
genotype.fromparent.source = "fromParentS"

genotype.mpc_cadd.name = "MPC and CADD"
genotype.mpc_cadd.slots = [{source = "mpc", name = "mpc", format = "%%.3f"}, {source = "cadd_raw", name = "raw", format = "%%.3f"}, {source = "cadd_phred", name = "phred", format = "%%.3f"}]

genotype.freq.name = "Frequency"
genotype.freq.slots = [{source = "exome_gnomad_af_percent", name = "exome gnomad", format = "%%.3f"}, {source = "genome_gnomad_af_percent", name = "genome gnomad", format = "%%.3f"}]


selected_genotype_column_values = [
    "family", "phenotype", "variant", "best", "fromparent", "inchild", "genotype",
    "effect", "count", "geneeffect", "effectdetails", "weights", "freq"
]

preview_columns = [
    "family", "variant", "genotype", "effect", "weights", "freq", "effect"
]

download_columns = [
    "family", "phenotype", "variant", "best", "fromparent", "inchild", "effect",
    "count", "geneeffect", "effectdetails", "weights", "freq"
]

summary_preview_columns = [
    "variant", "effect", "weights", "mpc_cadd", "freq"
]

summary_download_columns = [
    "variant", "effect", "geneeffect", "effectdetails", "weights", "freq"
]

[denovo_gene_sets]
enabled=false
standard_criterias.effect_types.segments = {LGDs = "LGDs", Missense = "missense", "Synonymous" = "synonymous"}
standard_criterias.sexes.segments = {Female = "F", Male = "M", Unspecified = "U"}

recurrency_criteria.segments = {Single = {start = 1, end = 2}, Triple = {start = 3, end = -1}, Recurrent = {start = 2, end = -1}}
gene_sets_names = [
    "LGDs", "LGDs.Male", "LGDs.Female", "LGDs.Recurrent", "LGDs.Single", "LGDs.Triple",
    "LGDs.WE.Recurrent", "LGDs.WE.Triple",
    "Missense", "Missense.Single", "Missense.Male", "Missense.Female",
    "Missense.Recurrent", "Missense.Triple", "Missense.WE.Recurrent", "Missense.WE.Triple",
    "Synonymous", "Synonymous.WE", "Synonymous.WE.Recurrent", "Synonymous.WE.Triple"
]

[person_set_collections]
phenotype.id = "phenotype"
phenotype.name = "Phenotype"
phenotype.domain = [
    {id = "phenotype1", value = "phenotype1", name = "phenotype 1", color = "#e35252"},
    {id = "phenotype2", value = "phenotype2", name = "phenotype 2", color = "#b8008a"},
    {id = "phenotype3", value = "phenotype3", name = "phenotype 3", color = "#e3d252"},
    {id = "unaffected", value = "unaffected", name = "unaffected", color = "#ffffff"}
]
phenotype.default = {id = "unknown", value = "unknown", name = "unknown", color = "#aaaaaa"}
phenotype.source.pedigree.column = "phenotype"

pheno.id = "pheno"
pheno.name = "Pheno"
pheno.domain = [
    {id = "pheno1", value = "pheno1", name = "pheno 1", color = "#e35252"},
    {id = "pheno2", value = "pheno2", name = "pheno 2", color = "#b8008a"},
    {id = "pheno3", value = "pheno3", name = "pheno 3", color = "#e3d252"},
    {id = "unaffected", value = "unaffected", name = "unaffected", color = "#ffffff"}
]
pheno.default = {id = "unknown", value = "unknown", name = "unknown", color = "#aaaaaa"}
pheno.source.pedigree.column = "pheno"

[enrichment]
enabled = false
selected_person_set_collections = ["phenotype"]
selected_background_values = ["coding_len_background_model", "samocha_background_model"]
# background.synonymous_background_model.name = "synonymous_background_model"
# background.synonymous_background_model.desc = "Synonymous Background Model"
background.coding_len_background_model.file = "enrichment/codingLenBackgroundModel.csv"
background.coding_len_background_model.name = "coding_len_background_model"
background.coding_len_background_model.kind = "coding_len_background_model"
background.coding_len_background_model.desc = "Coding Len Background Model"

background.samocha_background_model.file = "enrichment/samochaBackgroundModel.csv"
background.samocha_background_model.name = "samocha_background_model"
background.samocha_background_model.kind = "samocha_background_model"
background.samocha_background_model.desc = "Samocha Background Model"

default_background_model = "coding_len_background_model"
selected_counting_values = ["enrichment_events_counting", "enrichment_gene_counting"]
counting.enrichment_events_counting.name = "enrichment_events_counting"
counting.enrichment_events_counting.desc = "Enrichment Events Counting"
counting.enrichment_gene_counting.name = "enrichment_gene_counting"
counting.enrichment_gene_counting.desc = "Enrichment Gene Counting"
default_counting_model = "enrichment_gene_counting"
effect_types = ["LGDs", "missense", "synonymous"]

[common_report]
enabled = true
