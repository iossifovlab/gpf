"""
This type stub file was generated by pyright.
"""

TypeDefinition = ...
def compare_paths_lt(x, y): # -> bool:
    ...

def drop_item_from_tuple(t, i):
    ...

def get_Validator_class(): # -> type[Validator]:
    ...

def mapping_hash(schema): # -> int:
    ...

def mapping_to_frozenset(mapping): # -> frozenset[tuple[Any, Any]]:
    """
    Be aware that this treats any sequence type with the equal members as equal. As it
    is used to identify equality of schemas, this can be considered okay as definitions
    are semantically equal regardless the container type.
    """
    ...

def quote_string(value): # -> str:
    ...

class readonly_classproperty(property):
    def __get__(self, instance, owner): # -> Any:
        ...
    
    def __set__(self, instance, value):
        ...
    
    def __delete__(self, instance):
        ...
    


def validator_factory(name, bases=..., namespace=...): # -> Any:
    """
    Dynamically create a :class:`~cerberus.Validator` subclass.
    Docstrings of mixin-classes will be added to the resulting class' one if ``__doc__``
    is not in :obj:`namespace`.

    :param name: The name of the new class.
    :type name: :class:`str`
    :param bases: Class(es) with additional and overriding attributes.
    :type bases: :class:`tuple` of or a single :term:`class`
    :param namespace: Attributes for the new class.
    :type namespace: :class:`dict`
    :return: The created class.
    """
    ...

