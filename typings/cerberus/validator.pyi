"""
This type stub file was generated by pyright.
"""

from cerberus.utils import readonly_classproperty

toy_error_handler = ...
def dummy_for_rule_validation(rule_constraints):  # -> Callable[..., NoReturn]:
    ...

class DocumentError(Exception):
    """Raised when the target document is missing or has the wrong format"""

class _SchemaRuleTypeError(Exception):
    """
    Raised when a schema (list) validation encounters a mapping.
    Not supposed to be used outside this module.
    """

class BareValidator:
    """
    Validator class. Normalizes and/or validates any mapping against a
    validation-schema which is provided as an argument at class instantiation
    or upon calling the :meth:`~cerberus.Validator.validate`,
    :meth:`~cerberus.Validator.validated` or
    :meth:`~cerberus.Validator.normalized` method. An instance itself is
    callable and executes a validation.

    All instantiation parameters are optional.

    There are the introspective properties :attr:`types`, :attr:`validators`,
    :attr:`coercers`, :attr:`default_setters`, :attr:`rules`,
    :attr:`normalization_rules` and :attr:`validation_rules`.

    The attributes reflecting the available rules are assembled considering
    constraints that are defined in the docstrings of rules' methods and is
    effectively used as validation schema for :attr:`schema`.

    :param schema: See :attr:`~cerberus.Validator.schema`.
                   Defaults to :obj:`None`.
    :type schema: any :term:`mapping`
    :param ignore_none_values: See :attr:`~cerberus.Validator.ignore_none_values`.
                               Defaults to ``False``.
    :type ignore_none_values: :class:`bool`
    :param allow_unknown: See :attr:`~cerberus.Validator.allow_unknown`.
                          Defaults to ``False``.
    :type allow_unknown: :class:`bool` or any :term:`mapping`
    :param require_all: See :attr:`~cerberus.Validator.require_all`.
                        Defaults to ``False``.
    :type require_all: :class:`bool`
    :param purge_unknown: See :attr:`~cerberus.Validator.purge_unknown`.
                          Defaults to to ``False``.
    :type purge_unknown: :class:`bool`
    :param purge_readonly: Removes all fields that are defined as ``readonly`` in the
                           normalization phase.
    :type purge_readonly: :class:`bool`
    :param error_handler: The error handler that formats the result of
                          :attr:`~cerberus.Validator.errors`.
                          When given as two-value tuple with an error-handler
                          class and a dictionary, the latter is passed to the
                          initialization of the error handler.
                          Default: :class:`~cerberus.errors.BasicErrorHandler`.
    :type error_handler: class or instance based on
                         :class:`~cerberus.errors.BaseErrorHandler` or
                         :class:`tuple`
    """
    mandatory_validations = ...
    priority_validations = ...
    types_mapping = ...
    _valid_schemas = ...
    def __init__(self, *args, **kwargs) -> None:
        """
        The arguments will be treated as with this signature:

        __init__(self, schema=None, ignore_none_values=False,
                 allow_unknown=False, require_all=False,
                 purge_unknown=False, purge_readonly=False,
                 error_handler=errors.BasicErrorHandler)
        """

    @classmethod
    def clear_caches(cls):  # -> None:
        """Purge the cache of known valid schemas."""

    @property
    def allow_unknown(self):
        """
        If ``True`` unknown fields that are not defined in the schema will be ignored.
        If a mapping with a validation schema is given, any undefined field will be
        validated against its rules. Also see :ref:`allowing-the-unknown`.
        Type: :class:`bool` or any :term:`mapping`
        """

    @allow_unknown.setter
    def allow_unknown(self, value):  # -> None:
        ...

    @property
    def require_all(self):
        """
        If ``True`` known fields that are defined in the schema will be required.
        Type: :class:`bool`
        """

    @require_all.setter
    def require_all(self, value):  # -> None:
        ...

    @property
    def errors(self):
        """
        The errors of the last processing formatted by the handler that is bound to
        :attr:`~cerberus.Validator.error_handler`.
        """

    @property
    def ignore_none_values(self):
        """
        Whether to not process :obj:`None`-values in a document or not.
        Type: :class:`bool`
        """

    @ignore_none_values.setter
    def ignore_none_values(self, value):  # -> None:
        ...

    @property
    def is_child(self):
        """
        ``True`` for child-validators obtained with
        :meth:`~cerberus.Validator._get_child_validator`.
        Type: :class:`bool`
        """

    @property
    def purge_unknown(self):
        """
        If ``True``, unknown fields will be deleted from the document unless a
        validation is called with disabled normalization. Also see
        :ref:`purging-unknown-fields`.
        Type: :class:`bool`
        """

    @purge_unknown.setter
    def purge_unknown(self, value):  # -> None:
        ...

    @property
    def purge_readonly(self):
        """
        If ``True``, fields declared as readonly will be deleted from the document
        unless a validation is called with disabled normalization.
        Type: :class:`bool`
        """

    @purge_readonly.setter
    def purge_readonly(self, value):  # -> None:
        ...

    @property
    def root_allow_unknown(self):
        """
        The :attr:`~cerberus.Validator.allow_unknown` attribute of the first level
        ancestor of a child validator.
        """

    @property
    def root_require_all(self):
        """
        The :attr:`~cerberus.Validator.require_all` attribute of the first level
        ancestor of a child validator.
        """

    @property
    def root_document(self):
        """
        The :attr:`~cerberus.Validator.document` attribute of the first level ancestor
        of a child validator.
        """

    @property
    def rules_set_registry(self):
        """
        The registry that holds referenced rules sets.
        Type: :class:`~cerberus.Registry`
        """

    @rules_set_registry.setter
    def rules_set_registry(self, registry):  # -> None:
        ...

    @property
    def root_schema(self):
        """
        The :attr:`~cerberus.Validator.schema` attribute of the first level ancestor of
        a child validator.
        """

    @property
    def schema(self):  # -> DefinitionSchema | dict[Any, Any] | None:
        """
        The validation schema of a validator. When a schema is passed to a method, it
        replaces this attribute.
        Type: any :term:`mapping` or :obj:`None`
        """

    @schema.setter
    def schema(self, schema):  # -> None:
        ...

    @property
    def schema_registry(self):
        """
        The registry that holds referenced schemas.
        Type: :class:`~cerberus.Registry`
        """

    @schema_registry.setter
    def schema_registry(self, registry):  # -> None:
        ...

    @readonly_classproperty
    def types(cls):
        """
        The constraints that can be used for the 'type' rule.
        Type: A tuple of strings.
        """

    def normalized(self, document, schema=..., always_return_document=...):  # -> None:
        """
        Returns the document normalized according to the specified rules of a schema.

        :param document: The document to normalize.
        :type document: any :term:`mapping`
        :param schema: The validation schema. Defaults to :obj:`None`. If not
                       provided here, the schema must have been provided at
                       class instantiation.
        :type schema: any :term:`mapping`
        :param always_return_document: Return the document, even if an error
                                       occurred. Defaults to: ``False``.
        :type always_return_document: :class:`bool`
        :return: A normalized copy of the provided mapping or :obj:`None` if an
                 error occurred during normalization.
        """

    def validate(self, document, schema=..., update=..., normalize=...):  # -> bool:
        """
        Normalizes and validates a mapping against a validation-schema of defined rules.

        :param document: The document to normalize.
        :type document: any :term:`mapping`
        :param schema: The validation schema. Defaults to :obj:`None`. If not
                       provided here, the schema must have been provided at
                       class instantiation.
        :type schema: any :term:`mapping`
        :param update: If ``True``, required fields won't be checked.
        :type update: :class:`bool`
        :param normalize: If ``True``, normalize the document before validation.
        :type normalize: :class:`bool`

        :return: ``True`` if validation succeeds, otherwise ``False``. Check
                 the :func:`errors` property for a list of processing errors.
        :rtype: :class:`bool`
        """

    __call__ = ...
    def validated(self, *args, **kwargs):  # -> None:
        """
        Wrapper around :meth:`~cerberus.Validator.validate` that returns the normalized
        and validated document or :obj:`None` if validation failed.
        """

    _validate_allow_unknown = ...
    _validate_meta = ...
    _validate_required = ...
    _validate_require_all = ...

RULE_SCHEMA_SEPARATOR = ...
class InspectedValidator(type):
    """Metaclass for all validators"""
    def __new__(cls, *args):  # -> type:
        ...

    def __init__(cls, *args) -> None:
        ...

Validator = ...
