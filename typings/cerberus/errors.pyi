"""
This type stub file was generated by pyright.
"""

from cerberus.platform import MutableMapping

""" This module contains the error-related constants and classes. """
ErrorDefinition = ...
CUSTOM = ...
DOCUMENT_MISSING = ...
DOCUMENT_MISSING = ...
REQUIRED_FIELD = ...
UNKNOWN_FIELD = ...
DEPENDENCIES_FIELD = ...
DEPENDENCIES_FIELD_VALUE = ...
EXCLUDES_FIELD = ...
DOCUMENT_FORMAT = ...
DOCUMENT_FORMAT = ...
EMPTY_NOT_ALLOWED = ...
NOT_NULLABLE = ...
BAD_TYPE = ...
BAD_TYPE_FOR_SCHEMA = ...
ITEMS_LENGTH = ...
MIN_LENGTH = ...
MAX_LENGTH = ...
REGEX_MISMATCH = ...
MIN_VALUE = ...
MAX_VALUE = ...
UNALLOWED_VALUE = ...
UNALLOWED_VALUES = ...
FORBIDDEN_VALUE = ...
FORBIDDEN_VALUES = ...
MISSING_MEMBERS = ...
NORMALIZATION = ...
COERCION_FAILED = ...
RENAMING_FAILED = ...
READONLY_FIELD = ...
SETTING_DEFAULT_FAILED = ...
ERROR_GROUP = ...
MAPPING_SCHEMA = ...
SEQUENCE_SCHEMA = ...
KEYSCHEMA = ...
VALUESCHEMA = ...
BAD_ITEMS = ...
LOGICAL = ...
NONEOF = ...
ONEOF = ...
ANYOF = ...
ALLOF = ...
SCHEMA_ERROR_DEFINITION_TYPE = ...
SCHEMA_ERROR_MISSING = ...
class ValidationError:
    """A simple class to store and query basic error information."""
    def __init__(self, document_path, schema_path, code, rule, constraint, value, info) -> None:
        ...

    def __eq__(self, other) -> bool:
        """Assumes the errors relate to the same document and schema."""

    def __hash__(self) -> int:
        """Expects that all other properties are transitively determined."""

    def __lt__(self, other) -> bool:
        ...

    def __repr__(self):  # -> str:
        ...

    @property
    def child_errors(self):  # -> None:
        """
        A list that contains the individual errors of a bulk validation error.
        """

    @property
    def definitions_errors(self):  # -> defaultdict[Any, list[Any]] | None:
        r"""
        Dictionary with errors of an \*of-rule mapped to the index of the definition it
        occurred in. Returns :obj:`None` if not applicable.
        """

    @property
    def field(self):  # -> None:
        """Field of the contextual mapping, possibly :obj:`None`."""

    @property
    def is_group_error(self):  # -> bool:
        """``True`` for errors of bulk validations."""

    @property
    def is_logic_error(self):  # -> bool:
        r"""
        ``True`` for validation errors against different schemas with \*of-rules.
        """

    @property
    def is_normalization_error(self):  # -> bool:
        """``True`` for normalization errors."""

class ErrorList(list):
    """
    A list for :class:`~cerberus.errors.ValidationError` instances that can be queried
    with the ``in`` keyword for a particular :class:`~cerberus.errors.ErrorDefinition`.
    """
    def __contains__(self, error_definition):  # -> bool:
        ...

class ErrorTreeNode(MutableMapping):
    __slots__ = ...
    def __init__(self, path, parent_node) -> None:
        ...

    def __contains__(self, item):  # -> bool:
        ...

    def __delitem__(self, key):  # -> None:
        ...

    def __iter__(self):  # -> Iterator[Any]:
        ...

    def __getitem__(self, item):  # -> None:
        ...

    def __len__(self):  # -> int:
        ...

    def __repr__(self):  # -> str:
        ...

    def __setitem__(self, key, value):  # -> None:
        ...

    def __str__(self) -> str:
        ...

    @property
    def depth(self):  # -> int:
        ...

    @property
    def tree_type(self):
        ...

    def add(self, error):  # -> None:
        ...

class ErrorTree(ErrorTreeNode):
    """
    Base class for :class:`~cerberus.errors.DocumentErrorTree` and
    :class:`~cerberus.errors.SchemaErrorTree`.
    """
    def __init__(self, errors=...) -> None:
        ...

    def add(self, error):  # -> None:
        """
        Add an error to the tree.

        :param error: :class:`~cerberus.errors.ValidationError`
        """

    def fetch_errors_from(self, path):  # -> ErrorList:
        """
        Returns all errors for a particular path.

        :param path: :class:`tuple` of :term:`hashable` s.
        :rtype: :class:`~cerberus.errors.ErrorList`
        """

    def fetch_node_from(self, path):  # -> Self | None:
        """
        Returns a node for a path.

        :param path: Tuple of :term:`hashable` s.
        :rtype: :class:`~cerberus.errors.ErrorTreeNode` or :obj:`None`
        """

class DocumentErrorTree(ErrorTree):
    """
    Implements a dict-like class to query errors by indexes following the structure of a
    validated document.
    """
    tree_type = ...

class SchemaErrorTree(ErrorTree):
    """
    Implements a dict-like class to query errors by indexes following the structure of
    the used schema.
    """
    tree_type = ...

class BaseErrorHandler:
    """Base class for all error handlers.
    Subclasses are identified as error-handlers with an instance-test."""
    def __init__(self, *args, **kwargs) -> None:
        """Optionally initialize a new instance."""

    def __call__(self, errors):
        """
        Returns errors in a handler-specific format.

        :param errors: An object containing the errors.
        :type errors: :term:`iterable` of
                      :class:`~cerberus.errors.ValidationError` instances or a
                      :class:`~cerberus.Validator` instance
        """

    def __iter__(self):
        """Be a superhero and implement an iterator over errors."""

    def add(self, error):
        """
        Add an error to the errors' container object of a handler.

        :param error: The error to add.
        :type error: :class:`~cerberus.errors.ValidationError`
        """

    def emit(self, error):  # -> None:
        """
        Optionally emits an error in the handler's format to a stream. Or light a LED,
        or even shut down a power plant.

        :param error: The error to emit.
        :type error: :class:`~cerberus.errors.ValidationError`
        """

    def end(self, validator):  # -> None:
        """
        Gets called when a validation ends.

        :param validator: The calling validator.
        :type validator: :class:`~cerberus.Validator`
        """

    def extend(self, errors):  # -> None:
        """
        Adds all errors to the handler's container object.

        :param errors: The errors to add.
        :type errors: :term:`iterable` of
                      :class:`~cerberus.errors.ValidationError` instances
        """

    def start(self, validator):  # -> None:
        """
        Gets called when a validation starts.

        :param validator: The calling validator.
        :type validator: :class:`~cerberus.Validator`
        """

class ToyErrorHandler(BaseErrorHandler):
    def __call__(self, *args, **kwargs):
        ...

    def clear(self):  # -> None:
        ...

def encode_unicode(f):
    """Cerberus error messages expect regular binary strings.
    If unicode is used in a ValidationError message can't be printed.

    This decorator ensures that if legacy Python is used unicode
    strings are encoded before passing to a function.
    """

class BasicErrorHandler(BaseErrorHandler):
    """
    Models cerberus' legacy. Returns a :class:`dict`. When mangled through :class:`str`
    a pretty-formatted representation of that tree is returned.
    """
    messages = ...
    def __init__(self, tree=...) -> None:
        ...

    def __call__(self, errors):  # -> dict[Any, Any]:
        ...

    def __str__(self) -> str:
        ...

    @property
    def pretty_tree(self):  # -> dict[Any, Any]:
        ...

    @encode_unicode
    def add(self, error):  # -> None:
        ...

    def clear(self):  # -> None:
        ...

    def start(self, validator):  # -> None:
        ...

class SchemaErrorHandler(BasicErrorHandler):
    messages = ...
